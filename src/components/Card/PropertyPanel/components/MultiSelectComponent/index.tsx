// MultiSelectComponent ÁºñËæëÁïåÈù¢ - ‰∏ãÊãâÂ§öÈÄâÁªÑ‰ª∂
import {
  BgColorsOutlined,
  CloseOutlined,
  DeleteOutlined,
  PlusOutlined,
  SettingOutlined,
} from '@ant-design/icons';
import {
  Button,
  Form,
  Input,
  Popover,
  Segmented,
  Switch,
  Tabs,
  Typography,
} from 'antd';
import React, { useEffect, useRef, useState } from 'react';
import AddVariableModal from '../../../Variable/AddVariableModal';
import VariableBinding from '../../../Variable/VariableList';
import {
  multiSelectComponentStateManager,
  optionEditStateManager,
} from '../../../Variable/utils/index';
import { MultiSelectComponentProps } from '../types';

const { Text } = Typography;

const MultiSelectComponent: React.FC<MultiSelectComponentProps> = React.memo(
  ({
    selectedComponent,
    variables,
    topLevelTab,
    setTopLevelTab,
    multiSelectOptionsMode,
    setMultiSelectOptionsMode,
    lastBoundVariables,
    setLastBoundVariables,
    // onUpdateComponent: _,
    handleValueChange,
    // getFilteredVariables,
    getVariableDisplayName,
    getVariableKeys,
    handleAddVariableFromComponent,
    isVariableModalVisible,
    handleVariableModalOk,
    handleVariableModalCancel,
    editingVariable,
    isVariableModalFromVariablesTab,
    modalComponentType,
    VariableManagementPanel,
  }) => {
    const [form] = Form.useForm();
    const [optionPopoverVisible, setOptionPopoverVisible] = useState(false);
    const [editingOptionIndex, setEditingOptionIndex] = useState<number | null>(
      null,
    );
    const [optionForm] = Form.useForm();
    const [optionTextMode, setOptionTextMode] = useState<
      'specify' | 'variable'
    >('specify');
    const [optionValueMode, setOptionValueMode] = useState<
      'specify' | 'variable'
    >('specify');
    const [refreshKey, setRefreshKeyInternal] = useState(0);
    const [popoverRefreshKey, setPopoverRefreshKey] = useState(0); // ‰∏ìÈó®Áî®‰∫épopoverÂÜÖÈÉ®Âà∑Êñ∞
    const [isAddingVariable, setIsAddingVariable] = useState(false);
    const [forcePopoverOpen, setForcePopoverOpen] = useState(false);
    const isVariableOperatingRef = useRef(false);

    // Âèó‰øùÊä§ÁöÑsetRefreshKeyÂáΩÊï∞
    const setRefreshKey = (updater: (prev: number) => number) => {
      if (
        isVariableModalVisible ||
        isAddingVariable ||
        isVariableOperatingRef.current
      ) {
        console.log('üö´ ÂèòÈáèÊìç‰Ωú‰∏≠ÔºåÈòªÊ≠¢setRefreshKeyË∞ÉÁî®', {
          isVariableModalVisible,
          isAddingVariable,
          isVariableOperating: isVariableOperatingRef.current,
        });
        return;
      }
      console.log('‚úÖ ÂÖÅËÆ∏setRefreshKeyË∞ÉÁî®');
      setRefreshKeyInternal(updater);
    };

    console.log('üìù Ê∏≤Êüì‰∏ãÊãâÂ§öÈÄâÁªÑ‰ª∂ÁºñËæëÁïåÈù¢:', {
      componentId: selectedComponent.id,
      topLevelTab,
      variablesCount: variables.length,
    });

    // ËØ¶ÁªÜÁöÑÂèòÈáèÊï∞ÊçÆË∞ÉËØï
    console.log('üîç Â±ûÊÄßÈù¢ÊùøÊé•Êî∂Âà∞ÁöÑÂèòÈáèÊï∞ÊçÆ:', {
      variables,
      variablesLength: variables.length,
      selectedComponentOptions: (selectedComponent as any).options,
    });

    // ÊâãÂä®Âà∑Êñ∞Êú∫Âà∂ÔºöÂè™Âú®ÁªÑ‰ª∂IDÂèòÂåñÊó∂Âà∑Êñ∞
    useEffect(() => {
      console.log('üîÑ ÁªÑ‰ª∂IDÂèòÂåñÔºåÂà∑Êñ∞ÈÄâÈ°πÂàóË°®');
      setRefreshKey((prev) => prev + 1);
    }, [selectedComponent.id]);

    // Ê≥®ÈáäÊéâÊúâÈóÆÈ¢òÁöÑuseEffectÔºåÊîπÁî®ÊâãÂä®Âà∑Êñ∞Êú∫Âà∂
    // useEffect(() => {
    //   // Â¶ÇÊûúÊ≠£Âú®ËøõË°åÂèòÈáèÊìç‰ΩúÔºåÂÆåÂÖ®ÈòªÊ≠¢Âà∑Êñ∞
    //   if (
    //     isVariableModalVisible ||
    //     isAddingVariable ||
    //     isVariableOperatingRef.current
    //   ) {
    //     console.log('üîÑ ÂèòÈáèÊìç‰Ωú‰∏≠ÔºåÂÆåÂÖ®ÈòªÊ≠¢Âà∑Êñ∞', {
    //       isVariableModalVisible,
    //       isAddingVariable,
    //       isVariableOperating: isVariableOperatingRef.current,
    //     });
    //     return;
    //   }

    //   console.log('üîÑ ÁªÑ‰ª∂Êï∞ÊçÆÂèòÂåñÔºåÂà∑Êñ∞ÈÄâÈ°πÂàóË°®');
    //   setRefreshKey((prev) => prev + 1);
    // }, [
    //   selectedComponent.id,
    //   JSON.stringify((selectedComponent as any).options),
    //   JSON.stringify(variables),
    //   isVariableModalVisible,
    //   isAddingVariable,
    // ]);

    // Â§ÑÁêÜÈÄâÈ°πÁºñËæë
    const handleEditOption = (index: number) => {
      const option = (selectedComponent as any).options[index];
      setEditingOptionIndex(index);

      // Ê£ÄÊü•ÊòØÂê¶‰∏∫Êñ∞ÁöÑÊï∞ÊçÆÁªìÊûÑ
      const textContent = option.text?.content || option.label || '';
      const valueContent = option.value || '';

      // Ê£ÄÊü•ÊòØÂê¶ÊúâÁªëÂÆöÁöÑÂèòÈáè
      const boundTextVariable = optionEditStateManager.getBoundTextVariableName(
        selectedComponent.id,
        index,
      );
      const boundValueVariable =
        optionEditStateManager.getBoundValueVariableName(
          selectedComponent.id,
          index,
        );

      // Ëé∑ÂèñÁî®Êà∑ÁºñËæëÁöÑÂÜÖÂÆπ
      const userEditedTextContent =
        optionEditStateManager.getUserEditedTextContent(
          selectedComponent.id,
          index,
        );
      const userEditedValue = optionEditStateManager.getUserEditedValue(
        selectedComponent.id,
        index,
      );

      // Âà§Êñ≠Ê®°ÂºèÔºöÂ¶ÇÊûúÊúâÁªëÂÆöÂèòÈáèÊàñËÄÖÂÜÖÂÆπÊòØÂèòÈáèÂç†‰ΩçÁ¨¶Ê†ºÂºèÔºåÂàô‰∏∫ÂèòÈáèÊ®°Âºè
      const isTextVariableMode =
        boundTextVariable || textContent.startsWith('${');
      const isValueVariableMode =
        boundValueVariable ||
        (typeof valueContent === 'string' && valueContent.startsWith('${'));

      // ËÆæÁΩÆÊ®°Âºè
      setOptionTextMode(isTextVariableMode ? 'variable' : 'specify');
      setOptionValueMode(isValueVariableMode ? 'variable' : 'specify');

      // ËÆæÁΩÆË°®ÂçïÂÄº
      optionForm.setFieldsValue({
        textContent: isTextVariableMode
          ? userEditedTextContent || ''
          : textContent,
        value: isValueVariableMode ? userEditedValue || '' : valueContent,
      });

      setOptionPopoverVisible(true);
      setForcePopoverOpen(true);
      // ÈáçÁΩÆÂà∑Êñ∞ÈîÆ‰ª•Á°Æ‰øùVariableBindingÁªÑ‰ª∂Ê≠£Á°ÆÂàùÂßãÂåñ
      if (
        !isVariableModalVisible &&
        !isAddingVariable &&
        !isVariableOperatingRef.current
      ) {
        setRefreshKey((prev) => prev + 1);
      }
    };

    // ‰øùÂ≠òÈÄâÈ°πÁºñËæë
    const handleSaveOption = () => {
      optionForm.validateFields().then((values) => {
        const newOptions = [...((selectedComponent as any).options || [])];
        if (editingOptionIndex !== null) {
          let textContent: string;
          let valueContent: string;

          // Â§ÑÁêÜÈÄâÈ°πÊñáÊú¨
          if (optionTextMode === 'variable') {
            // ÂèòÈáèÊ®°ÂºèÔºö‰øùÂ≠òÁî®Êà∑ÁºñËæëÁöÑÂÜÖÂÆπÂà∞Áä∂ÊÄÅÁÆ°ÁêÜÂô®Ôºå‰ΩøÁî®ÂèòÈáèÂç†‰ΩçÁ¨¶
            const boundTextVariable =
              optionEditStateManager.getBoundTextVariableName(
                selectedComponent.id,
                editingOptionIndex,
              );
            if (boundTextVariable) {
              textContent = `\${${boundTextVariable}}`;
              // ‰øùÂ≠òÁî®Êà∑ÁºñËæëÁöÑÂÜÖÂÆπÔºàÂ¶ÇÊûúÊúâÁöÑËØùÔºâ
              if (values.textContent) {
                optionEditStateManager.setUserEditedTextContent(
                  selectedComponent.id,
                  editingOptionIndex,
                  values.textContent,
                );
              }
            } else {
              textContent = values.textContent || '';
            }
          } else {
            // ÊåáÂÆöÊ®°ÂºèÔºöÁõ¥Êé•‰ΩøÁî®Áî®Êà∑ËæìÂÖ•ÁöÑÂÜÖÂÆπ
            textContent = values.textContent || '';
            // ‰øùÂ≠òÂà∞Áä∂ÊÄÅÁÆ°ÁêÜÂô®
            optionEditStateManager.setUserEditedTextContent(
              selectedComponent.id,
              editingOptionIndex,
              textContent,
            );
          }

          // Â§ÑÁêÜÂõû‰º†ÂèÇÊï∞
          if (optionValueMode === 'variable') {
            // ÂèòÈáèÊ®°ÂºèÔºö‰øùÂ≠òÁî®Êà∑ÁºñËæëÁöÑÂÜÖÂÆπÂà∞Áä∂ÊÄÅÁÆ°ÁêÜÂô®Ôºå‰ΩøÁî®ÂèòÈáèÂç†‰ΩçÁ¨¶
            const boundValueVariable =
              optionEditStateManager.getBoundValueVariableName(
                selectedComponent.id,
                editingOptionIndex,
              );
            if (boundValueVariable) {
              valueContent = `\${${boundValueVariable}}`;
              // ‰øùÂ≠òÁî®Êà∑ÁºñËæëÁöÑÂÜÖÂÆπÔºàÂ¶ÇÊûúÊúâÁöÑËØùÔºâ
              if (values.value) {
                optionEditStateManager.setUserEditedValue(
                  selectedComponent.id,
                  editingOptionIndex,
                  values.value,
                );
              }
            } else {
              valueContent = values.value || '';
            }
          } else {
            // ÊåáÂÆöÊ®°ÂºèÔºöÁõ¥Êé•‰ΩøÁî®Áî®Êà∑ËæìÂÖ•ÁöÑÂÜÖÂÆπ
            valueContent = values.value || '';
            // ‰øùÂ≠òÂà∞Áä∂ÊÄÅÁÆ°ÁêÜÂô®
            optionEditStateManager.setUserEditedValue(
              selectedComponent.id,
              editingOptionIndex,
              valueContent,
            );
          }

          // ÊûÑÂª∫Êñ∞ÁöÑÊï∞ÊçÆÁªìÊûÑ
          const newOption = {
            value: valueContent,
            text: {
              content: textContent,
              i18n_content: {
                'en-US': textContent,
              },
            },
          };

          newOptions[editingOptionIndex] = newOption;
          handleValueChange('options', newOptions);
        }
        setOptionPopoverVisible(false);
        setForcePopoverOpen(false);
        setEditingOptionIndex(null);
        optionForm.resetFields();

        // popoverÂÖ≥Èó≠ÂêéÂª∂ËøüÂà∑Êñ∞ÔºåÁ°Æ‰øùÈÄâÈ°πÂàóË°®ÊòæÁ§∫Êõ¥Êñ∞
        setTimeout(() => {
          console.log('üîÑ ‰øùÂ≠òÈÄâÈ°πÂêéÂà∑Êñ∞‰ª•Á°Æ‰øùÊòæÁ§∫Êõ¥Êñ∞');
          setRefreshKey((prev) => prev + 1);
        }, 50);
      });
    };

    // ÂèñÊ∂àÈÄâÈ°πÁºñËæë
    const handleCancelOptionEdit = () => {
      setOptionPopoverVisible(false);
      setForcePopoverOpen(false);
      setEditingOptionIndex(null);
      optionForm.resetFields();

      // popoverÂÖ≥Èó≠ÂêéÂª∂ËøüÂà∑Êñ∞ÔºåÁ°Æ‰øùÂèòÈáèÂõûÊòæÊ≠£Á°ÆÊòæÁ§∫
      setTimeout(() => {
        console.log('üîÑ popoverÂÖ≥Èó≠ÂêéÂà∑Êñ∞‰ª•Á°Æ‰øùÂèòÈáèÂõûÊòæ');
        setRefreshKey((prev) => prev + 1);
      }, 50);
    };

    // Ëé∑ÂèñÊñáÊú¨ÂíåÊï¥Êï∞Á±ªÂûãÁöÑÂèòÈáè
    const getTextAndNumberVariables = () => {
      return variables.filter((variable) => {
        // Â§ÑÁêÜÊñ∞Ê†ºÂºèÁöÑÂèòÈáèÔºàÁõ¥Êé•ÊòØÂØπË±°Ôºâ
        if (typeof variable === 'object' && !variable.hasOwnProperty('name')) {
          return true; // Êñ∞Ê†ºÂºèÂèòÈáèÊöÇÊó∂ÈÉΩÂÖÅËÆ∏
        }
        // Â§ÑÁêÜÊóßÊ†ºÂºèÁöÑÂèòÈáè
        const varType =
          (variable as any).originalType || (variable as any).type;
        return varType === 'text' || varType === 'number';
      });
    };

    // Ëé∑ÂèñÈÄâÈ°πÊï∞ÁªÑÁ±ªÂûãÁöÑÂèòÈáè
    const getOptionArrayVariables = () => {
      return variables.filter((variable) => {
        // Â§ÑÁêÜÊñ∞Ê†ºÂºèÁöÑÂèòÈáèÔºàÁõ¥Êé•ÊòØÂØπË±°Ôºâ
        if (typeof variable === 'object' && !variable.hasOwnProperty('name')) {
          // Ê£ÄÊü•ÂèòÈáèÁ±ªÂûãÊòØÂê¶‰∏∫array
          const varType = (variable as any).type;
          return varType === 'array';
        }
        // Â§ÑÁêÜÊóßÊ†ºÂºèÁöÑÂèòÈáè
        const varType =
          (variable as any).originalType || (variable as any).type;
        return varType === 'array';
      });
    };

    // Ëé∑ÂèñÂÆâÂÖ®ÁöÑÈÄâÈ°πÊï∞ÁªÑÔºàÁî®‰∫éÊåáÂÆöÊ®°ÂºèÔºâ
    const getSafeOptionsArray = () => {
      const options = (selectedComponent as any).options;

      // Â¶ÇÊûúÊòØÂ≠óÁ¨¶‰∏≤Ê†ºÂºèÔºàÂèòÈáèÁªëÂÆöÔºâÔºåËøîÂõûÈªòËÆ§ÈÄâÈ°π
      if (typeof options === 'string') {
        console.log('üîÑ Ê£ÄÊµãÂà∞ÂèòÈáèÁªëÂÆöÊ†ºÂºèÔºåËøîÂõûÈªòËÆ§ÈÄâÈ°πÊï∞ÁªÑ');
        return [
          {
            text: { content: 'ÈÄâÈ°π1', i18n_content: { 'en-US': 'Option 1' } },
            value: 'option1',
          },
          {
            text: { content: 'ÈÄâÈ°π2', i18n_content: { 'en-US': 'Option 2' } },
            value: 'option2',
          },
        ];
      }

      // Â¶ÇÊûúÊòØÊï∞ÁªÑÊ†ºÂºèÔºåÁõ¥Êé•ËøîÂõû
      if (Array.isArray(options)) {
        return options;
      }

      // ÂÖ∂‰ªñÊÉÖÂÜµËøîÂõûÈªòËÆ§ÈÄâÈ°π
      console.log('üîÑ optionsÊ†ºÂºèÂºÇÂ∏∏ÔºåËøîÂõûÈªòËÆ§ÈÄâÈ°πÊï∞ÁªÑ');
      return [
        {
          text: { content: 'ÈÄâÈ°π1', i18n_content: { 'en-US': 'Option 1' } },
          value: 'option1',
        },
        {
          text: { content: 'ÈÄâÈ°π2', i18n_content: { 'en-US': 'Option 2' } },
          value: 'option2',
        },
      ];
    };

    // Ëß£ÊûêÂèòÈáèÂÄº
    const resolveVariableValue = (content: string): string => {
      console.log('üîç ÂºÄÂßãËß£ÊûêÂèòÈáèÂÄº:', { content });

      if (!content || !content.includes('${')) {
        console.log('üìù ÂÜÖÂÆπ‰∏çÂåÖÂê´ÂèòÈáèÔºåÁõ¥Êé•ËøîÂõû:', content);
        return content;
      }

      const variableMatch = content.match(/\$\{([^}]+)\}/);
      if (variableMatch && variableMatch[1]) {
        const variableName = variableMatch[1];
        console.log('üéØ ÊèêÂèñÂà∞ÂèòÈáèÂêç:', variableName);
        console.log('üìã ÊâÄÊúâÂèòÈáè:', variables);

        // Êü•ÊâæÂèòÈáè
        const variable = variables.find((v) => {
          if (typeof v === 'object' && v !== null) {
            const keys = Object.keys(v as Record<string, any>);
            console.log('üîç Ê£ÄÊü•ÂèòÈáè:', { v, keys, variableName });

            // Ê£ÄÊü•‰∏§ÁßçÂèòÈáèÊ†ºÂºèÔºö
            // 1. ÁîªÂ∏ÉÊ†ºÂºè: {var_123: '22222'}
            // 2. Â±ûÊÄßÈù¢ÊùøÊ†ºÂºè: {name: 'var_123', type: 'text', value: '22222', ...}
            const hasVariableName = keys.includes(variableName); // Ê†ºÂºè1
            const isStandardFormat =
              keys.includes('name') && (v as any).name === variableName; // Ê†ºÂºè2

            console.log('üîç ÂèòÈáèÂêçÂåπÈÖçÊ£ÄÊü•:', {
              variableName,
              keys,
              hasVariableName,
              isStandardFormat,
              variableObject: v,
              keysDetail: keys.map((key) => ({ key, value: (v as any)[key] })),
            });

            return hasVariableName || isStandardFormat;
          }
          return false;
        });

        console.log('‚úÖ ÊâæÂà∞ÁöÑÂèòÈáè:', variable);

        if (variable && typeof variable === 'object') {
          // Ê†πÊçÆÂèòÈáèÊ†ºÂºèËé∑ÂèñÂÄº
          let variableValue;
          const keys = Object.keys(variable as Record<string, any>);

          if (
            keys.includes('name') &&
            (variable as any).name === variableName
          ) {
            // Ê†áÂáÜÊ†ºÂºè: {name: 'var_123', value: '22222', ...}
            variableValue = (variable as any).value;
            console.log('üí° Ê†áÂáÜÊ†ºÂºèÂèòÈáèÂÄº:', {
              variableName,
              variableValue,
              source: 'value',
            });
          } else {
            // ÁîªÂ∏ÉÊ†ºÂºè: {var_123: '22222'}
            variableValue = (variable as any)[variableName];
            console.log('üí° ÁîªÂ∏ÉÊ†ºÂºèÂèòÈáèÂÄº:', {
              variableName,
              variableValue,
              source: 'direct',
            });
          }

          if (variableValue !== undefined && variableValue !== null) {
            const result = String(variableValue);
            console.log('üéâ ËøîÂõûËß£ÊûêÁªìÊûú:', result);
            return result;
          }
        }

        // Â¶ÇÊûúÊâæ‰∏çÂà∞ÂèòÈáèÂÄºÔºåËøîÂõûÂèòÈáèÂêçÔºà‰∏çÂ∏¶${}Ôºâ
        console.log('‚ö†Ô∏è ÂèòÈáèÊú™ÊâæÂà∞ÔºåËøîÂõûÂèòÈáèÂêç:', variableName);
        return variableName;
      }

      console.log('‚ùå Êó†Ê≥ïÂåπÈÖçÂèòÈáèÊ†ºÂºèÔºåËøîÂõûÂéüÂÜÖÂÆπ:', content);
      return content;
    };

    // PopoverÂÜÖÂÆπ
    const getPopoverContent = () => (
      <div style={{ width: 320, padding: '8px 0' }}>
        <div
          style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: 16,
            paddingBottom: 8,
            borderBottom: '1px solid #f0f0f0',
          }}
        >
          <span style={{ fontWeight: 600 }}>ÈÄâÈ°πËÆæÁΩÆ</span>
          <Button
            type="text"
            size="small"
            icon={<CloseOutlined />}
            onClick={handleCancelOptionEdit}
          />
        </div>
        <Form form={optionForm} layout="vertical">
          {/* ÈÄâÈ°πÊñáÊú¨ */}
          <Form.Item label="ÈÄâÈ°πÊñáÊú¨" style={{ marginBottom: 16 }}>
            <Segmented
              value={optionTextMode}
              onChange={(value) => {
                const newMode = value as 'specify' | 'variable';
                setOptionTextMode(newMode);

                if (editingOptionIndex !== null) {
                  if (newMode === 'specify') {
                    // ÂàáÊç¢Âà∞ÊåáÂÆöÊ®°ÂºèÔºöÊòæÁ§∫Áî®Êà∑ÁºñËæëÁöÑÂÜÖÂÆπ
                    const userEditedContent =
                      optionEditStateManager.getUserEditedTextContent(
                        selectedComponent.id,
                        editingOptionIndex,
                      );
                    optionForm.setFieldsValue({
                      textContent: userEditedContent || '',
                    });
                  } else {
                    // ÂàáÊç¢Âà∞ÂèòÈáèÊ®°ÂºèÔºöÊ£ÄÊü•ÊòØÂê¶ÊúâÁªëÂÆöÁöÑÂèòÈáè
                    // const boundVariable =
                    //   optionEditStateManager.getBoundTextVariableName(
                    //     selectedComponent.id,
                    //     editingOptionIndex,
                    //   );
                    // ÂèòÈáèÊ®°Âºè‰∏ã‰∏çÈúÄË¶ÅËÆæÁΩÆtextContentÔºåÁî±VariableBindingÁªÑ‰ª∂Â§ÑÁêÜ
                  }
                }
              }}
              options={[
                { label: 'ÊåáÂÆö', value: 'specify' },
                { label: 'ÁªëÂÆöÂèòÈáè', value: 'variable' },
              ]}
              style={{ marginBottom: 8 }}
            />
            {optionTextMode === 'specify' && (
              <Form.Item
                name="textContent"
                rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•ÈÄâÈ°πÊñáÊú¨' }]}
                style={{ marginBottom: 0 }}
              >
                <Input
                  placeholder="ËØ∑ËæìÂÖ•ÈÄâÈ°πÊñáÊú¨"
                  onChange={(e) => {
                    // ÂÆûÊó∂‰øùÂ≠òÁî®Êà∑ÁºñËæëÁöÑÂÜÖÂÆπ
                    if (editingOptionIndex !== null) {
                      optionEditStateManager.setUserEditedTextContent(
                        selectedComponent.id,
                        editingOptionIndex,
                        e.target.value,
                      );
                    }
                  }}
                />
              </Form.Item>
            )}
            {optionTextMode === 'variable' && (
              <VariableBinding
                key={`text-${editingOptionIndex}-${popoverRefreshKey}`}
                componentType="text"
                variables={getTextAndNumberVariables()}
                getFilteredVariables={() => getTextAndNumberVariables()}
                value={
                  editingOptionIndex !== null
                    ? optionEditStateManager.getBoundTextVariableName(
                        selectedComponent.id,
                        editingOptionIndex,
                      ) || ''
                    : ''
                }
                onChange={(value: string | undefined) => {
                  // Â§ÑÁêÜÂèòÈáèÁªëÂÆöÈÄªËæë
                  if (editingOptionIndex !== null) {
                    console.log('üîó ÈÄâÈ°πÊñáÊú¨ÂèòÈáèÁªëÂÆöÂºÄÂßã:', {
                      optionIndex: editingOptionIndex,
                      variableName: value,
                      componentId: selectedComponent.id,
                    });

                    isVariableOperatingRef.current = true;

                    optionEditStateManager.setBoundTextVariableName(
                      selectedComponent.id,
                      editingOptionIndex,
                      value,
                    );

                    // Âª∂ËøüÂà∑Êñ∞ÔºåÈÅøÂÖçÈó™ÁÉÅ
                    setTimeout(() => {
                      isVariableOperatingRef.current = false;
                      console.log('üîÑ ÂèòÈáèÊìç‰ΩúÂÆåÊàêÔºåÈáçÁΩÆÁä∂ÊÄÅ');

                      // ÂÜçÊ¨°Âª∂ËøüÔºåÁ°Æ‰øùÂèòÈáèÂºπÁ™óÂíåpopoverÁä∂ÊÄÅÁ®≥ÂÆöÂêéÂÜçÂà∑Êñ∞
                      setTimeout(() => {
                        if (
                          !isVariableModalVisible &&
                          !isAddingVariable &&
                          !optionPopoverVisible
                        ) {
                          console.log('‚úÖ ÂÆâÂÖ®Âà∑Êñ∞‰ª•ÊòæÁ§∫ÂèòÈáèÂõûÊòæ');
                          setRefreshKey((prev) => prev + 1);
                        } else if (
                          optionPopoverVisible &&
                          !isVariableModalVisible &&
                          !isAddingVariable
                        ) {
                          // Â¶ÇÊûúÂè™ÊòØpopoverÊâìÂºÄÔºåËøõË°åÂ±ÄÈÉ®Âà∑Êñ∞
                          console.log('üîÑ popoverÂÜÖÈÉ®Â±ÄÈÉ®Âà∑Êñ∞‰ª•ÊòæÁ§∫ÂèòÈáèÂõûÊòæ');
                          setPopoverRefreshKey((prev) => prev + 1);
                        } else {
                          console.log('üö´ ÂèòÈáèÂºπÁ™óÊàñpopover‰ªçÊâìÂºÄÔºåË∑≥ËøáÂà∑Êñ∞', {
                            isVariableModalVisible,
                            isAddingVariable,
                            optionPopoverVisible,
                          });
                        }
                      }, 100);
                    }, 50);
                  }
                }}
                getVariableDisplayName={getVariableDisplayName}
                getVariableKeys={getVariableKeys}
                onAddVariable={() => {
                  console.log('‚ûï Ê∑ªÂä†ÈÄâÈ°πÊñáÊú¨ÂèòÈáè');
                  isVariableOperatingRef.current = true;
                  setIsAddingVariable(true);
                  handleAddVariableFromComponent('multi_select_static_text');
                  // Ê∑ªÂä†ÂèòÈáèÂêéÈáçÁΩÆÁä∂ÊÄÅ
                  setTimeout(() => {
                    console.log('üîÑ Ê∑ªÂä†ÂèòÈáèÂÆåÊàêÔºåÈáçÁΩÆÁä∂ÊÄÅ');
                    setIsAddingVariable(false);
                    isVariableOperatingRef.current = false;
                  }, 100);
                }}
                placeholder="ËØ∑ÈÄâÊã©ÊñáÊú¨ÂèòÈáè"
                label=""
                addVariableText="Êñ∞Âª∫ÂèòÈáè"
              />
            )}
          </Form.Item>

          {/* Âõû‰º†ÂèÇÊï∞ */}
          <Form.Item label="Âõû‰º†ÂèÇÊï∞" style={{ marginBottom: 16 }}>
            <Segmented
              value={optionValueMode}
              onChange={(value) => {
                const newMode = value as 'specify' | 'variable';
                setOptionValueMode(newMode);

                if (editingOptionIndex !== null) {
                  if (newMode === 'specify') {
                    // ÂàáÊç¢Âà∞ÊåáÂÆöÊ®°ÂºèÔºöÊòæÁ§∫Áî®Êà∑ÁºñËæëÁöÑÂÜÖÂÆπ
                    const userEditedValue =
                      optionEditStateManager.getUserEditedValue(
                        selectedComponent.id,
                        editingOptionIndex,
                      );
                    optionForm.setFieldsValue({
                      value: userEditedValue || '',
                    });
                  } else {
                    // ÂàáÊç¢Âà∞ÂèòÈáèÊ®°ÂºèÔºöÊ£ÄÊü•ÊòØÂê¶ÊúâÁªëÂÆöÁöÑÂèòÈáè
                    // const boundVariable =
                    //   optionEditStateManager.getBoundValueVariableName(
                    //     selectedComponent.id,
                    //     editingOptionIndex,
                    //   );
                    // ÂèòÈáèÊ®°Âºè‰∏ã‰∏çÈúÄË¶ÅËÆæÁΩÆvalueÔºåÁî±VariableBindingÁªÑ‰ª∂Â§ÑÁêÜ
                  }
                }
              }}
              options={[
                { label: 'ÊåáÂÆö', value: 'specify' },
                { label: 'ÁªëÂÆöÂèòÈáè', value: 'variable' },
              ]}
              style={{ marginBottom: 8 }}
            />
            {optionValueMode === 'specify' && (
              <Form.Item
                name="value"
                rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Âõû‰º†ÂèÇÊï∞' }]}
                style={{ marginBottom: 0 }}
              >
                <Input
                  placeholder="ËØ∑ËæìÂÖ•Âõû‰º†ÂèÇÊï∞"
                  onChange={(e) => {
                    // ÂÆûÊó∂‰øùÂ≠òÁî®Êà∑ÁºñËæëÁöÑÂÜÖÂÆπ
                    if (editingOptionIndex !== null) {
                      optionEditStateManager.setUserEditedValue(
                        selectedComponent.id,
                        editingOptionIndex,
                        e.target.value,
                      );
                    }
                  }}
                />
              </Form.Item>
            )}
            {optionValueMode === 'variable' && (
              <VariableBinding
                key={`value-${editingOptionIndex}-${popoverRefreshKey}`}
                componentType="text"
                variables={getTextAndNumberVariables()}
                getFilteredVariables={() => getTextAndNumberVariables()}
                value={
                  editingOptionIndex !== null
                    ? optionEditStateManager.getBoundValueVariableName(
                        selectedComponent.id,
                        editingOptionIndex,
                      ) || ''
                    : ''
                }
                onChange={(value: string | undefined) => {
                  // Â§ÑÁêÜÂèòÈáèÁªëÂÆöÈÄªËæë
                  if (editingOptionIndex !== null) {
                    console.log('üîó Âõû‰º†ÂèÇÊï∞ÂèòÈáèÁªëÂÆöÂºÄÂßã:', {
                      optionIndex: editingOptionIndex,
                      variableName: value,
                      componentId: selectedComponent.id,
                    });

                    isVariableOperatingRef.current = true;

                    optionEditStateManager.setBoundValueVariableName(
                      selectedComponent.id,
                      editingOptionIndex,
                      value,
                    );

                    // Âª∂ËøüÂà∑Êñ∞ÔºåÈÅøÂÖçÈó™ÁÉÅ
                    setTimeout(() => {
                      isVariableOperatingRef.current = false;
                      console.log('üîÑ ÂèòÈáèÊìç‰ΩúÂÆåÊàêÔºåÈáçÁΩÆÁä∂ÊÄÅ');

                      // ÂÜçÊ¨°Âª∂ËøüÔºåÁ°Æ‰øùÂèòÈáèÂºπÁ™óÂíåpopoverÁä∂ÊÄÅÁ®≥ÂÆöÂêéÂÜçÂà∑Êñ∞
                      setTimeout(() => {
                        if (
                          !isVariableModalVisible &&
                          !isAddingVariable &&
                          !optionPopoverVisible
                        ) {
                          console.log('‚úÖ ÂÆâÂÖ®Âà∑Êñ∞‰ª•ÊòæÁ§∫ÂèòÈáèÂõûÊòæ');
                          setRefreshKey((prev) => prev + 1);
                        } else if (
                          optionPopoverVisible &&
                          !isVariableModalVisible &&
                          !isAddingVariable
                        ) {
                          // Â¶ÇÊûúÂè™ÊòØpopoverÊâìÂºÄÔºåËøõË°åÂ±ÄÈÉ®Âà∑Êñ∞
                          console.log('üîÑ popoverÂÜÖÈÉ®Â±ÄÈÉ®Âà∑Êñ∞‰ª•ÊòæÁ§∫ÂèòÈáèÂõûÊòæ');
                          setPopoverRefreshKey((prev) => prev + 1);
                        } else {
                          console.log('üö´ ÂèòÈáèÂºπÁ™óÊàñpopover‰ªçÊâìÂºÄÔºåË∑≥ËøáÂà∑Êñ∞', {
                            isVariableModalVisible,
                            isAddingVariable,
                            optionPopoverVisible,
                          });
                        }
                      }, 100);
                    }, 50);
                  }
                }}
                getVariableDisplayName={getVariableDisplayName}
                getVariableKeys={getVariableKeys}
                onAddVariable={() => {
                  console.log('‚ûï Ê∑ªÂä†Âõû‰º†ÂèÇÊï∞ÂèòÈáè');
                  isVariableOperatingRef.current = true;
                  setIsAddingVariable(true);
                  handleAddVariableFromComponent('multi_select_static_text');
                  // Ê∑ªÂä†ÂèòÈáèÂêéÈáçÁΩÆÁä∂ÊÄÅ
                  setTimeout(() => {
                    console.log('üîÑ Ê∑ªÂä†ÂèòÈáèÂÆåÊàêÔºåÈáçÁΩÆÁä∂ÊÄÅ');
                    setIsAddingVariable(false);
                    isVariableOperatingRef.current = false;
                  }, 100);
                }}
                placeholder="ËØ∑ÈÄâÊã©ÂèÇÊï∞ÂèòÈáè"
                label=""
                addVariableText="Êñ∞Âª∫ÂèòÈáè"
              />
            )}
          </Form.Item>

          <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 8 }}>
            <Button size="small" onClick={handleCancelOptionEdit}>
              ÂèñÊ∂à
            </Button>
            <Button size="small" type="primary" onClick={handleSaveOption}>
              ‰øùÂ≠ò
            </Button>
          </div>
        </Form>
      </div>
    );

    return (
      <div
        style={{
          width: '300px',
          height: 'calc(100vh - 60px)',
          backgroundColor: '#fafafa',
          borderLeft: '1px solid #d9d9d9',
          padding: '16px',
          overflow: 'auto',
        }}
      >
        <AddVariableModal
          visible={isVariableModalVisible}
          onOk={handleVariableModalOk}
          onCancel={handleVariableModalCancel}
          editingVariable={editingVariable}
          componentType={
            isVariableModalFromVariablesTab
              ? undefined
              : modalComponentType || selectedComponent?.tag
          }
        />

        <Tabs
          activeKey={topLevelTab}
          onChange={setTopLevelTab}
          style={{ height: '100%' }}
          tabBarStyle={{
            padding: '0 16px',
            backgroundColor: '#fff',
            margin: 0,
            borderBottom: '1px solid #d9d9d9',
          }}
          size="small"
          items={[
            {
              key: 'component',
              label: (
                <span
                  style={{ display: 'flex', alignItems: 'center', gap: '4px' }}
                >
                  <SettingOutlined />
                  ÁªÑ‰ª∂Â±ûÊÄß
                </span>
              ),
              children: (
                <div style={{ padding: '16px' }}>
                  <div
                    style={{
                      marginBottom: '16px',
                      padding: '12px',
                      backgroundColor: '#f0f9ff',
                      border: '1px solid #bae6fd',
                      borderRadius: '6px',
                    }}
                  >
                    <Text style={{ fontSize: '12px', color: '#0369a1' }}>
                      üéØ ÂΩìÂâçÈÄâ‰∏≠Ôºö‰∏ãÊãâÂ§öÈÄâÁªÑ‰ª∂
                    </Text>
                  </div>

                  {/* Âü∫Á°ÄËÆæÁΩÆ */}
                  <div
                    style={{
                      marginBottom: '16px',
                      background: '#fff',
                      borderRadius: 6,
                      boxShadow: '0 1px 3px rgba(0,0,0,0.03)',
                      padding: 16,
                    }}
                  >
                    <div
                      style={{ fontWeight: 600, marginBottom: 8, fontSize: 15 }}
                    >
                      ‚öôÔ∏è Âü∫Á°ÄËÆæÁΩÆ
                    </div>
                    <Form form={form} layout="vertical">
                      <Form.Item label="ÂøÖÂ°´">
                        <Switch
                          checked={(selectedComponent as any).required || false}
                          onChange={(checked) =>
                            handleValueChange('required', checked)
                          }
                        />
                      </Form.Item>
                    </Form>
                  </div>

                  {/* ÈÄâÈ°πËÆæÁΩÆ */}
                  <div
                    style={{
                      background: '#fff',
                      borderRadius: 6,
                      boxShadow: '0 1px 3px rgba(0,0,0,0.03)',
                      padding: 16,
                    }}
                  >
                    <div
                      style={{ fontWeight: 600, marginBottom: 8, fontSize: 15 }}
                    >
                      üìã ÈÄâÈ°πËÆæÁΩÆ
                    </div>
                    <Form form={form} layout="vertical">
                      <Form.Item label="ÈÄâÈ°πÊù•Ê∫ê">
                        <Segmented
                          value={multiSelectOptionsMode}
                          style={{ marginBottom: 16 }}
                          onChange={(value) => {
                            const newMode = value as 'specify' | 'variable';
                            console.log('üîÑ ÈÄâÈ°πÊù•Ê∫êÊ®°ÂºèÂàáÊç¢:', {
                              from: multiSelectOptionsMode,
                              to: newMode,
                              componentId: selectedComponent.id,
                            });

                            setMultiSelectOptionsMode(newMode);

                            // Â§ÑÁêÜÊ®°ÂºèÂàáÊç¢Êó∂ÁöÑÊï∞ÊçÆËΩ¨Êç¢
                            if (selectedComponent) {
                              if (newMode === 'variable') {
                                // ÂàáÊç¢Âà∞ÁªëÂÆöÂèòÈáèÊ®°ÂºèÔºåÊ£ÄÊü•ÊòØÂê¶ÊúâÂ∑≤ÁªëÂÆöÁöÑÂèòÈáè
                                const boundVariable =
                                  multiSelectComponentStateManager.getBoundVariableName(
                                    selectedComponent.id,
                                  );
                                const rememberedVariable =
                                  lastBoundVariables[selectedComponent.id];
                                const variableName =
                                  boundVariable || rememberedVariable;

                                if (variableName) {
                                  console.log(
                                    'üîó Â∫îÁî®Â∑≤ÁªëÂÆöÁöÑÂèòÈáè:',
                                    variableName,
                                  );
                                  handleValueChange(
                                    'options',
                                    `\${${variableName}}`,
                                  );
                                }
                              } else if (newMode === 'specify') {
                                // ÂàáÊç¢Âà∞ÊåáÂÆöÊ®°ÂºèÔºåÊ£ÄÊü•ÂΩìÂâçoptionsÊòØÂê¶‰∏∫Â≠óÁ¨¶‰∏≤Ê†ºÂºè
                                const currentOptions = (
                                  selectedComponent as any
                                ).options;
                                if (typeof currentOptions === 'string') {
                                  console.log(
                                    'üîÑ ‰ªéÁªëÂÆöÂèòÈáèÂàáÊç¢Âà∞ÊåáÂÆöÊ®°ÂºèÔºåÊÅ¢Â§çÈªòËÆ§ÈÄâÈ°π',
                                  );
                                  const defaultOptions = [
                                    {
                                      text: {
                                        content: 'ÈÄâÈ°π1',
                                        i18n_content: { 'en-US': 'Option 1' },
                                      },
                                      value: 'option1',
                                    },
                                    {
                                      text: {
                                        content: 'ÈÄâÈ°π2',
                                        i18n_content: { 'en-US': 'Option 2' },
                                      },
                                      value: 'option2',
                                    },
                                  ];
                                  handleValueChange('options', defaultOptions);
                                }
                              }
                            }
                          }}
                          options={[
                            { label: 'ÊåáÂÆö', value: 'specify' },
                            { label: 'ÁªëÂÆöÂèòÈáè', value: 'variable' },
                          ]}
                        />

                        {multiSelectOptionsMode === 'specify' && (
                          <div
                            key={`option-list-${refreshKey}`}
                            style={{ marginBottom: 16 }}
                          >
                            <Text
                              strong
                              style={{ marginBottom: 8, display: 'block' }}
                            >
                              ÈÄâÈ°πÂàóË°®
                            </Text>
                            {getSafeOptionsArray().map(
                              (option: any, index: number) => (
                                <div
                                  key={`option-${index}-${refreshKey}`}
                                  style={{
                                    marginBottom: 8,
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '8px',
                                  }}
                                >
                                  <Popover
                                    content={getPopoverContent()}
                                    title={null}
                                    trigger="click"
                                    open={
                                      (optionPopoverVisible ||
                                        forcePopoverOpen) &&
                                      editingOptionIndex === index
                                    }
                                    onOpenChange={(visible) => {
                                      console.log('üîÑ Popover onOpenChange:', {
                                        visible,
                                        index,
                                        isVariableModalVisible,
                                        isAddingVariable,
                                        editingOptionIndex,
                                        forcePopoverOpen,
                                      });

                                      // Â¶ÇÊûúÊ≠£Âú®ËøõË°åÂèòÈáèÊìç‰ΩúÔºåÂÆåÂÖ®ÂøΩÁï•onOpenChange‰∫ã‰ª∂
                                      if (
                                        isVariableModalVisible ||
                                        isAddingVariable
                                      ) {
                                        console.log(
                                          'üö´ ÂèòÈáèÊìç‰Ωú‰∏≠ÔºåÂøΩÁï•popoverÁä∂ÊÄÅÂèòÂåñ',
                                        );
                                        return;
                                      }

                                      if (visible) {
                                        handleEditOption(index);
                                      } else {
                                        console.log('‚úÖ Ê≠£Â∏∏ÂÖ≥Èó≠popover');
                                        handleCancelOptionEdit();
                                      }
                                    }}
                                    placement="rightTop"
                                    overlayStyle={{
                                      zIndex:
                                        isVariableModalVisible ||
                                        isAddingVariable
                                          ? 999
                                          : 1050,
                                    }}
                                  >
                                    <Button
                                      style={{
                                        flex: 1,
                                        textAlign: 'left',
                                        justifyContent: 'flex-start',
                                      }}
                                    >
                                      {(() => {
                                        const textContent =
                                          option.text?.content ||
                                          option.label ||
                                          `ÈÄâÈ°π${index + 1}`;
                                        // Ëß£ÊûêÂèòÈáèÂÄº‰ª•ÊòæÁ§∫ÂÆûÈôÖÂÜÖÂÆπ
                                        const resolvedValue =
                                          resolveVariableValue(textContent);

                                        // Ë∞ÉËØïÊó•Âøó
                                        console.log('üîç ÈÄâÈ°πÊåâÈíÆÊòæÁ§∫Ë∞ÉËØï:', {
                                          index,
                                          textContent,
                                          resolvedValue,
                                          refreshKey,
                                          variables: variables.length,
                                          allVariables: variables,
                                          option: option,
                                          componentId: selectedComponent.id,
                                        });

                                        // Âº∫Âà∂ÊòæÁ§∫Ë∞ÉËØï‰ø°ÊÅØ
                                        if (
                                          textContent &&
                                          textContent.includes('${')
                                        ) {
                                          console.log(
                                            'üö® Â±ûÊÄßÈù¢ÊùøÂèëÁé∞ÂèòÈáè:',
                                            textContent,
                                          );
                                          console.log(
                                            'üö® Ëß£ÊûêÁªìÊûú:',
                                            resolvedValue,
                                          );
                                        }

                                        return resolvedValue;
                                      })()}
                                    </Button>
                                  </Popover>
                                  <Button
                                    type="text"
                                    size="small"
                                    danger
                                    icon={<DeleteOutlined />}
                                    onClick={() => {
                                      const newOptions = [
                                        ...(selectedComponent as any).options,
                                      ];
                                      newOptions.splice(index, 1);
                                      handleValueChange('options', newOptions);
                                    }}
                                  />
                                </div>
                              ),
                            )}
                            <Button
                              type="dashed"
                              block
                              icon={<PlusOutlined />}
                              onClick={() => {
                                const newOptions = [
                                  ...((selectedComponent as any).options || []),
                                ];
                                const newIndex = newOptions.length + 1;
                                newOptions.push({
                                  value: `option${newIndex}`,
                                  text: {
                                    content: `ÈÄâÈ°π${newIndex}`,
                                    i18n_content: {
                                      'en-US': `Option${newIndex}`,
                                    },
                                  },
                                });
                                handleValueChange('options', newOptions);
                              }}
                            >
                              Ê∑ªÂä†ÈÄâÈ°π
                            </Button>
                          </div>
                        )}

                        {multiSelectOptionsMode === 'variable' && (
                          <div>
                            <VariableBinding
                              componentType="multi_select_static"
                              variables={getOptionArrayVariables()}
                              getFilteredVariables={() =>
                                getOptionArrayVariables()
                              }
                              value={(() => {
                                const rememberedVariable = selectedComponent
                                  ? lastBoundVariables[selectedComponent.id]
                                  : undefined;
                                const currentBoundVariable =
                                  multiSelectComponentStateManager.getBoundVariableName(
                                    selectedComponent.id,
                                  );
                                return (
                                  rememberedVariable || currentBoundVariable
                                );
                              })()}
                              onChange={(value: string | undefined) => {
                                console.log('üîó ÈÄâÈ°πÊù•Ê∫êÁªëÂÆöÂèòÈáèÊîπÂèò:', {
                                  componentId: selectedComponent.id,
                                  variableName: value,
                                  timestamp: new Date().toISOString(),
                                });

                                // Â§ÑÁêÜÂèòÈáèÁªëÂÆöÈÄªËæë
                                if (selectedComponent) {
                                  if (value) {
                                    // ËÆæÁΩÆÁä∂ÊÄÅÁÆ°ÁêÜ
                                    setLastBoundVariables((prev) => ({
                                      ...prev,
                                      [selectedComponent.id]: value,
                                    }));
                                    multiSelectComponentStateManager.setBoundVariableName(
                                      selectedComponent.id,
                                      value,
                                    );

                                    // Êõ¥Êñ∞DSLÊï∞ÊçÆÔºöËÆæÁΩÆoptions‰∏∫${ÂèòÈáèÂêç}Ê†ºÂºè
                                    console.log(
                                      'üìù Êõ¥Êñ∞DSLÊï∞ÊçÆ‰∏∫ÂèòÈáèÁªëÂÆöÊ†ºÂºè:',
                                      `\${${value}}`,
                                    );
                                    handleValueChange(
                                      'options',
                                      `\${${value}}`,
                                    );
                                  } else {
                                    // Ê∏ÖÈô§ÁªëÂÆö
                                    setLastBoundVariables((prev) => {
                                      const newState = { ...prev };
                                      delete newState[selectedComponent.id];
                                      return newState;
                                    });
                                    multiSelectComponentStateManager.setBoundVariableName(
                                      selectedComponent.id,
                                      '',
                                    );

                                    // ÊÅ¢Â§ç‰∏∫ÊåáÂÆöÊ®°ÂºèÁöÑÈªòËÆ§ÈÄâÈ°π
                                    console.log(
                                      'üîÑ Ê∏ÖÈô§ÂèòÈáèÁªëÂÆöÔºåÊÅ¢Â§çÈªòËÆ§ÈÄâÈ°π',
                                    );
                                    const defaultOptions = [
                                      {
                                        text: {
                                          content: 'ÈÄâÈ°π1',
                                          i18n_content: { 'en-US': 'Option 1' },
                                        },
                                        value: 'option1',
                                      },
                                      {
                                        text: {
                                          content: 'ÈÄâÈ°π2',
                                          i18n_content: { 'en-US': 'Option 2' },
                                        },
                                        value: 'option2',
                                      },
                                    ];
                                    handleValueChange(
                                      'options',
                                      defaultOptions,
                                    );
                                  }
                                }
                              }}
                              getVariableDisplayName={getVariableDisplayName}
                              getVariableKeys={getVariableKeys}
                              onAddVariable={() =>
                                handleAddVariableFromComponent(
                                  'multi_select_static_array',
                                )
                              }
                              placeholder="ËØ∑ÈÄâÊã©ÈÄâÈ°πÂèòÈáè"
                              label="ÁªëÂÆöÂèòÈáè"
                              addVariableText="Êñ∞Âª∫ÂèòÈáè"
                            />
                          </div>
                        )}
                      </Form.Item>
                    </Form>
                  </div>
                </div>
              ),
            },
            {
              key: 'variables',
              label: (
                <span
                  style={{ display: 'flex', alignItems: 'center', gap: '4px' }}
                >
                  <BgColorsOutlined />
                  ÂèòÈáè
                </span>
              ),
              children: <VariableManagementPanel />,
            },
          ]}
        />
      </div>
    );
  },
);

MultiSelectComponent.displayName = 'MultiSelectComponent';

export default MultiSelectComponent;
